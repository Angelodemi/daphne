package it.daphne.controllers;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import static java.util.Comparator.comparingInt;
import static java.util.stream.Collectors.toMap;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import it.daphne.entity.Appartamento;
import it.daphne.entity.InterventoPulizia;
import it.daphne.repository.AppartamentoRepository;
import it.daphne.repository.InterventoPuliziaRepository;
import it.daphne.repository.PrenotazioneRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path="/puliziaAppartamenti") // T
public class GoogleMapsController {
		 @Autowired // This means to get the bean called userRepository
	     // Which is auto-generated by Spring, we will use it to handle the data
	private PrenotazioneRepository prenotazioneRepository;
	
	@Autowired
	private InterventoPuliziaRepository interventoPuliziaRepository;
	
	@Autowired
	private AppartamentoRepository appartamentoRepository;
	
	private  Map<String,List<String>> caps= new HashMap<String,List<String>>(){{
		put("00134", new ArrayList<String>(Arrays.asList("00128","00143","00178")));
		put("00128", new ArrayList<String>(Arrays.asList("00134","00143","00144","00127","00125","00124")));
		put("00124", new ArrayList<String>(Arrays.asList("00128","00122","00125","00121","00119")));
		put("00122", new ArrayList<String>(Arrays.asList("00124","00121")));
		put( "00121", new ArrayList<String>(Arrays.asList("00122","00124","00119")));
		put("00119", new ArrayList<String>(Arrays.asList("00121","00124","00125","00126","00148")));
		put("00126", new ArrayList<String>(Arrays.asList("00119","00125","00127","00148")));
		put("00127", new ArrayList<String>(Arrays.asList("00128","00125","00126","00148","00144")));
		put("00125", new ArrayList<String>(Arrays.asList("00128","00124","00127","00126","00119")));
		put("00148", new ArrayList<String>(Arrays.asList("00119","00126","00127","00144","00146","00149","00151","00164","00163","00166")));
										
		put("00163", new ArrayList<String>(Arrays.asList("00166","00148","00164","00165")));
		put("00166", new ArrayList<String>(Arrays.asList("00163","00148","00167","00165","00168","00135","00123")));
	
	
		put("00123", new ArrayList<String>(Arrays.asList("00135","00189","00188","00166")));
				put("00188", new ArrayList<String>(Arrays.asList("00123","00189","00138")));
						put("00138", new ArrayList<String>(Arrays.asList("00188","00189","00191","00139","00141")));
								put("00139", new ArrayList<String>(Arrays.asList("00138","00141","00137")));
										put("00137", new ArrayList<String>(Arrays.asList("00139","00141","00156","00131")));
												put("00131", new ArrayList<String>(Arrays.asList("00137","00155","00156","00132")));
														put("00132", new ArrayList<String>(Arrays.asList("00133","00155","00131")));
																put("00133", new ArrayList<String>(Arrays.asList("00173","00169","00155","00132")));
put(						"00173", new ArrayList<String>(Arrays.asList("00133","00169","00175","00174","00178","00118")));
put(						"00118", new ArrayList<String>(Arrays.asList("00173","00178")));
put(						"00178", new ArrayList<String>(Arrays.asList("00134","00143","00142","00179","00181","00175","00174","00173","00118")));
put(						"00143", new ArrayList<String>(Arrays.asList("00178","00134","00128","00144","00142")));
put(						"00144", new ArrayList<String>(Arrays.asList("00143","00128","00127","00148","00146","00145","00142","00143")));
put(						"00165", new ArrayList<String>(Arrays.asList("00163","00166","00167","00136","00193","00185","00153","00152","00164")));
put(						"00135", new ArrayList<String>(Arrays.asList("00168","00166","00123","00189","00191","00196","00195","00136")));
put(						"00189", new ArrayList<String>(Arrays.asList("00135","00123","00188","00138","00191")));
put(						"00156", new ArrayList<String>(Arrays.asList("00141","00137","00155","00158","00131")));
put(						"00155", new ArrayList<String>(Arrays.asList("00132","00131","00156","00153","00172","00177","00159","00133","00169","00171")));
put(						"00169", new ArrayList<String>(Arrays.asList("00133","00173","00175","00172","00155")));
put(						"00142", new ArrayList<String>(Arrays.asList("00178","00147","00179","00143","00144","00145")));
put(						"00146", new ArrayList<String>(Arrays.asList("00144","00154","00145","00148","00149","00153")));
put(						"00149", new ArrayList<String>(Arrays.asList("00148","00151","00152","00153","00146")));
put(						"00151", new ArrayList<String>(Arrays.asList("00164","00152","00149","00148")));
put(						"00164", new ArrayList<String>(Arrays.asList("00148","00151","00163","00165","00152")));
put(						"00168", new ArrayList<String>(Arrays.asList("00166","00167","00135","00136")));
put(						"00167", new ArrayList<String>(Arrays.asList("00168","00136","00165","00166")));
put(						"00136", new ArrayList<String>(Arrays.asList("00167","00190","00165","00168","00135","00195")));
put(						"00195", new ArrayList<String>(Arrays.asList("00135","00196","00190")));
put(						"00191", new ArrayList<String>(Arrays.asList("00135","00197","00196","00189","00138","00199")));
put(						"00196", new ArrayList<String>(Arrays.asList("00135","00195","00197","00191","00187","00185","00190")));
put(						"00197", new ArrayList<String>(Arrays.asList("00196","00191","00189","00198","00187")));
put(						"00189", new ArrayList<String>(Arrays.asList("00197","00191","00138","00141","00182","00198")));
put(						"00141", new ArrayList<String>(Arrays.asList("00189","00182","00138","00139","00137","00156","00158","00157")));
put(						"00153", new ArrayList<String>(Arrays.asList("00157","00141","00156","00155","00159")));
put(						"00157", new ArrayList<String>(Arrays.asList("00153","00159","00185","00182","00141")));
put(						"00159", new ArrayList<String>(Arrays.asList("00155","00177","00186","00185","00182","00158","00157")));
put(						"00186", new ArrayList<String>(Arrays.asList("00177","00175","00181","00182","00185","00159")));
put(						"00177", new ArrayList<String>(Arrays.asList("00155","00171","00172","00175","00181","00186","00159")));
put(						"00171", new ArrayList<String>(Arrays.asList("00177","00155","00172")));
put(						"00172", new ArrayList<String>(Arrays.asList("00155","00169","00175","00177","00171")));
put(						"00175", new ArrayList<String>(Arrays.asList("00172","00169","00173","00174","00181","00186","00177")));
put(						"00174", new ArrayList<String>(Arrays.asList("00173","00178","00175","00139","00137","00156","00158","00157")));
put(						"00147", new ArrayList<String>(Arrays.asList("00142","00145","00154","00179","00178")));
put(						"00145", new ArrayList<String>(Arrays.asList("00147","00142","00144","00146","00154")));
put(						"00154", new ArrayList<String>(Arrays.asList("00146","00153","00179","00147","00145")));
put(						"00153", new ArrayList<String>(Arrays.asList("00154","00146","00149","00152","00165","00185","00164","00179")));
put(						"00152", new ArrayList<String>(Arrays.asList("00151","00149","00164","00153")));
put(						"00193", new ArrayList<String>(Arrays.asList("00190","00186","00165")));
put(						"00190", new ArrayList<String>(Arrays.asList("00165","00193","00136","00196")));
put(						"00187", new ArrayList<String>(Arrays.asList("00185","00190","00196","00197","00198","00161","00185","00184")));
put(						"00185", new ArrayList<String>(Arrays.asList("00184","00187","00161","00182","00159","00188","00182","00183")));
put(						"00184", new ArrayList<String>(Arrays.asList("00183","00159","00153","00186","00187","00185")));
	}};
	
	
	@PostMapping(path="/calcoloDistanze") // Map ONLY POST Requests
    public @ResponseBody String calcolaDistanza () {
		List<InterventoPulizia> appartamentiDaLavareOggi= interventoPuliziaRepository.findAllInterventiOggi();
		
		return null;
		
		
	}

	private Map<String,List<String>> raggruppaCap() { // RAGGRUPPA CAP (CIOE PER OGNI CAP ASSOCIA GLI APPARTAMENTI DI QUEL CAP
		List<InterventoPulizia> interventiOggi = interventoPuliziaRepository.findAllInterventiOggi();
		Map<String, List<String>> listaCap=new HashMap<>();
		for(InterventoPulizia intervento: interventiOggi) {
			Optional<Appartamento> a=appartamentoRepository.findById(intervento.getIdAppartamento());
			if(!listaCap.containsKey(a.get().getCap())) {
				List<String> idApp= new ArrayList<>();
				idApp.add(a.get().getId());
				listaCap.put(a.get().getCap(), idApp);
			}
			else {
				List<String> idApp= listaCap.get(a.get().getCap());
				idApp.add(a.get().getId());
				listaCap.replace(a.get().getCap(), idApp);
			}	
		}
	 return listaCap;
	}
	
	private void creaGruppi(Map<String,List<String>> listaCap) {
		Map<Integer,List<String>> gruppo= new HashMap<>();
		
		//TODO tra i cap che ho, devo vedere i cap che sono adiacenti e ordinarli da quelli che ne hanno di meno a di piu
		for (Map.Entry<String,List<String>> entry: listaCap.entrySet()) // FA I GRUPPI PER I CAP CHE HANNO 4 O PIU APPARTAMENTI ASSOCIATI
		{
		    String key = entry.getKey();
		    List<String> value = entry.getValue();
		 
		    if(value.size()==4) {
		    	gruppo.put(gruppo.size(), value);
		    	listaCap.remove(key);
		    }
		    else if(value.size()>4) {
		    	int i=0;
		    	while(i<value.size()) {
		    		List<String> cap=new ArrayList<>();
		    		if(i%4==0 && i!=0) {
		    			gruppo.put(gruppo.size(), cap);
		    			value.remove(cap.get(0));
		    			value.remove(cap.get(1));
		    			value.remove(cap.get(2));
		    			value.remove(cap.get(3));
		    			cap.clear();
		    			cap.add(value.get(i));
		    		}
		    		else {
		    			cap.add(value.get(i));
		    		}
		    	}
		    }
		}
		
		// UNA VOLTA FINITO DI VEDERE QUELLI MAGGIORI DI QUATTRO, CON QUELLI RIMANENTI CREA I GRUPPI
		  Map<String,List<String>> capVicini= new HashMap<>();
		  capVicini=trovaCapViciniOrdinato(listaCap);
			for (Map.Entry<String,List<String>> entry: capVicini.entrySet()) { //creo i gruppi con quelli < 4
				
			}

		
	}
	
	private Map<String,List<String>> trovaCapViciniOrdinato(Map<String,List<String>> listaCap) {
		  Map<String,List<String>> capVicini= new HashMap<>();
		
		for (Map.Entry<String,List<String>> entry: listaCap.entrySet()) //FA I GRUPPI CON I RIMANENTI CAP CON <4 APPARTAMENTI
		{
			Iterator<Map.Entry<String, List<String>>> itr = caps.entrySet().iterator();
			
			while (itr.hasNext()) {
					if(entry.getValue().contains(itr.next())) {
						if(caps.get(entry.getKey()).contains(itr.next())) {
							if(!capVicini.containsKey(entry.getKey())) {
								List<String> a=new ArrayList<>();
								a.add(itr.next().getKey());
								capVicini.put(entry.getKey(),a);
							} else {
								capVicini.get(entry.getKey()).add(itr.next().getKey());
								}
						}
						
					}
				}
			}
		Map<String, List<String>> sorted = capVicini.entrySet().stream()  //ORDINO DA CHI HA MENO CAP A CHI DI PIU
			    .sorted(comparingInt(e -> e.getValue().size()))
			    .collect(toMap(
			        Map.Entry::getKey,
			        Map.Entry::getValue,
			        (a, b) -> { throw new AssertionError(); },
			        LinkedHashMap::new
			    )); 
			return sorted;
		}
	
	
}