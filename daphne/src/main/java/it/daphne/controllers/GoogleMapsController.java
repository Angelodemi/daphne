package it.daphne.controllers;

import static java.util.Comparator.comparingInt;
import static java.util.stream.Collectors.toMap;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import it.daphne.entity.Appartamento;
import it.daphne.entity.Gruppo;
import it.daphne.entity.GruppoCap;
import it.daphne.entity.InterventoPulizia;
import it.daphne.repository.AppartamentoRepository;
import it.daphne.repository.GruppoCapRepository;
import it.daphne.repository.GruppoRepository;
import it.daphne.repository.InterventoPuliziaRepository;
import it.daphne.repository.PrenotazioneRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path="/puliziaAppartamenti") // T
public class GoogleMapsController {
		 @Autowired // This means to get the bean called userRepository
	     // Which is auto-generated by Spring, we will use it to handle the data
	private PrenotazioneRepository prenotazioneRepository;
	
	@Autowired
	private InterventoPuliziaRepository interventoPuliziaRepository;
	
	@Autowired
	private GruppoRepository gruppoRepository;
	
	@Autowired
	private GruppoCapRepository gruppoCapRepository;
	
	@Autowired
	private AppartamentoRepository appartamentoRepository;
	
	private Map<String,List<String>> gruppo= new HashMap<>();

	
	private Map<String,List<String>> caps= new HashMap<String,List<String>>(){{
		put("00134", new ArrayList<String>(Arrays.asList("00128","00143","00178")));
		put("00128", new ArrayList<String>(Arrays.asList("00134","00143","00144","00127","00125","00124")));
		put("00124", new ArrayList<String>(Arrays.asList("00128","00122","00125","00121","00119")));
		put("00122", new ArrayList<String>(Arrays.asList("00124","00121")));
		put( "00121", new ArrayList<String>(Arrays.asList("00122","00124","00119")));
		put("00119", new ArrayList<String>(Arrays.asList("00121","00124","00125","00126","00148")));
		put("00126", new ArrayList<String>(Arrays.asList("00119","00125","00127","00148")));
		put("00127", new ArrayList<String>(Arrays.asList("00128","00125","00126","00148","00144")));
		put("00125", new ArrayList<String>(Arrays.asList("00128","00124","00127","00126","00119")));
		put("00148", new ArrayList<String>(Arrays.asList("00119","00126","00127","00144","00146","00149","00151","00164","00163","00166")));
										
		put("00163", new ArrayList<String>(Arrays.asList("00166","00148","00164","00165")));
		put("00166", new ArrayList<String>(Arrays.asList("00163","00148","00167","00165","00168","00135","00123")));
	
	
		put("00123", new ArrayList<String>(Arrays.asList("00135","00189","00188","00166")));
				put("00188", new ArrayList<String>(Arrays.asList("00123","00189","00138")));
						put("00138", new ArrayList<String>(Arrays.asList("00188","00189","00191","00139","00141")));
								put("00139", new ArrayList<String>(Arrays.asList("00138","00141","00137")));
										put("00137", new ArrayList<String>(Arrays.asList("00139","00141","00156","00131")));
												put("00131", new ArrayList<String>(Arrays.asList("00137","00155","00156","00132")));
														put("00132", new ArrayList<String>(Arrays.asList("00133","00155","00131")));
																put("00133", new ArrayList<String>(Arrays.asList("00173","00169","00155","00132")));
put(						"00173", new ArrayList<String>(Arrays.asList("00133","00169","00175","00174","00178","00118")));
put(						"00118", new ArrayList<String>(Arrays.asList("00173","00178")));
put(						"00178", new ArrayList<String>(Arrays.asList("00134","00143","00142","00179","00181","00175","00174","00173","00118")));
put(						"00143", new ArrayList<String>(Arrays.asList("00178","00134","00128","00144","00142")));
put(						"00144", new ArrayList<String>(Arrays.asList("00143","00128","00127","00148","00146","00145","00142","00143")));
put(						"00165", new ArrayList<String>(Arrays.asList("00163","00166","00167","00136","00193","00185","00153","00152","00164")));
put(						"00135", new ArrayList<String>(Arrays.asList("00168","00166","00123","00189","00191","00196","00195","00136")));
put(						"00189", new ArrayList<String>(Arrays.asList("00135","00123","00188","00138","00191")));
put(						"00156", new ArrayList<String>(Arrays.asList("00141","00137","00155","00158","00131")));
put(						"00155", new ArrayList<String>(Arrays.asList("00132","00131","00156","00153","00172","00177","00159","00133","00169","00171")));
put(						"00169", new ArrayList<String>(Arrays.asList("00133","00173","00175","00172","00155")));
put(						"00142", new ArrayList<String>(Arrays.asList("00178","00147","00179","00143","00144","00145")));
put(						"00146", new ArrayList<String>(Arrays.asList("00144","00154","00145","00148","00149","00153")));
put(						"00149", new ArrayList<String>(Arrays.asList("00148","00151","00152","00153","00146")));
put(						"00151", new ArrayList<String>(Arrays.asList("00164","00152","00149","00148")));
put(						"00164", new ArrayList<String>(Arrays.asList("00148","00151","00163","00165","00152")));
put(						"00168", new ArrayList<String>(Arrays.asList("00166","00167","00135","00136")));
put(						"00167", new ArrayList<String>(Arrays.asList("00168","00136","00165","00166")));
put(						"00136", new ArrayList<String>(Arrays.asList("00167","00190","00165","00168","00135","00195")));
put(						"00195", new ArrayList<String>(Arrays.asList("00135","00196","00190")));
put(						"00191", new ArrayList<String>(Arrays.asList("00135","00197","00196","00189","00138","00199")));
put(						"00196", new ArrayList<String>(Arrays.asList("00135","00195","00197","00191","00187","00185","00190")));
put(						"00197", new ArrayList<String>(Arrays.asList("00196","00191","00189","00198","00187")));
put(						"00189", new ArrayList<String>(Arrays.asList("00197","00191","00138","00141","00182","00198")));
put(						"00141", new ArrayList<String>(Arrays.asList("00189","00182","00138","00139","00137","00156","00158","00157")));
put(						"00153", new ArrayList<String>(Arrays.asList("00157","00141","00156","00155","00159")));
put(						"00157", new ArrayList<String>(Arrays.asList("00153","00159","00185","00182","00141")));
put(						"00159", new ArrayList<String>(Arrays.asList("00155","00177","00186","00185","00182","00158","00157")));
put(						"00186", new ArrayList<String>(Arrays.asList("00177","00175","00181","00182","00185","00159")));
put(						"00177", new ArrayList<String>(Arrays.asList("00155","00171","00172","00175","00181","00186","00159")));
put(						"00171", new ArrayList<String>(Arrays.asList("00177","00155","00172")));
put(						"00172", new ArrayList<String>(Arrays.asList("00155","00169","00175","00177","00171")));
put(						"00175", new ArrayList<String>(Arrays.asList("00172","00169","00173","00174","00181","00186","00177")));
put(						"00174", new ArrayList<String>(Arrays.asList("00173","00178","00175","00139","00137","00156","00158","00157")));
put(						"00147", new ArrayList<String>(Arrays.asList("00142","00145","00154","00179","00178")));
put(						"00145", new ArrayList<String>(Arrays.asList("00147","00142","00144","00146","00154")));
put(						"00154", new ArrayList<String>(Arrays.asList("00146","00153","00179","00147","00145")));
put(						"00153", new ArrayList<String>(Arrays.asList("00154","00146","00149","00152","00165","00185","00164","00179")));
put(						"00152", new ArrayList<String>(Arrays.asList("00151","00149","00164","00153")));
put(						"00193", new ArrayList<String>(Arrays.asList("00190","00186","00165")));
put(						"00190", new ArrayList<String>(Arrays.asList("00165","00193","00136","00196")));
put(						"00187", new ArrayList<String>(Arrays.asList("00185","00190","00196","00197","00198","00161","00185","00184")));
put(						"00185", new ArrayList<String>(Arrays.asList("00184","00187","00161","00182","00159","00188","00182","00183")));
put(						"00184", new ArrayList<String>(Arrays.asList("00183","00159","00153","00186","00187","00185")));
	}};
	
	
	private void insertGruppo() {
		for(Map.Entry<String,List<String>> entry: gruppo.entrySet()) {
			for(String cap: entry.getValue()) {
				GruppoCap gruppoCap=new GruppoCap();
				gruppoCap.setCap(cap);
				gruppoCap.setIdGruppoCap(entry.getKey());
				gruppoCapRepository.save(gruppoCap);
			}
		}
		for(int i=0;i<gruppo.size();i++) {
			Gruppo gruppo1=new Gruppo();
			gruppo1.setIdGruppo("gruppo"+i);
			gruppo1.setIdSquadra(i);
			gruppoRepository.save(gruppo1);
		}
		
	}
	@PostMapping(path="/calcoloDistanzeFinale") // Map ONLY POST Requests
	private Map<String, List<String>> calcolaDistanzaFinale(Map<String,List<String>> gruppoFinale ) throws IOException, ParseException {
		int minimo=0;
		int duration=0;
		int k=0;
		boolean first=true;
		
		for(Map.Entry<String,List<String>> entry: gruppoFinale.entrySet())
		while(k<entry.getValue().size()) {	
			List<String> idAppartamentiChiavePermutato= calcolaPermutazione(entry.getValue(),k);
			for(int i=1;i<entry.getValue().size();i++) { //calcola la distanza tra tutti gli appartamenti del cap di riferimento
				Optional<Appartamento> aPrec=appartamentoRepository.findById(idAppartamentiChiavePermutato.get(i-1));
				 Optional<Appartamento> a=appartamentoRepository.findById(idAppartamentiChiavePermutato.get(i));
				 String url="https://maps.googleapis.com/maps/api/directions/json?departure_time=now&destination="+a.get().getIndirizzo()+a.get().getCitta()+"&origin="+aPrec.get().getIndirizzo()+aPrec.get().getCitta()+"&key=AIzaSyBj74-Av4z5Exmne3hzvV1eWTOSBuw03AE";
				 duration=duration + getDuration(url);
			}
					 if(first || duration<minimo) {
						 minimo=duration;
						entry.getValue().clear();
						entry.getValue().addAll(idAppartamentiChiavePermutato);
						duration=0;
					 }
					 first=false;
					 k++;
				}
		
		return gruppoFinale;
			
	}

	
//    public String calcolaDistanza (Entry<String, List<String>> entry, List<String> capVicino, Map<String, List<String>> listaCap) throws IOException, ParseException {
//		
//		Optional<Appartamento> appartamento=appartamentoRepository.findById(entry.getKey());
//		int minimo=0;
//		String capMinimo="";
//		List<String> idAppartamentiChiave=listaCap.get(entry.getKey());
//		int duration=0;
//		int k=0;
//		int permutazioneMinima=0;
//		int kMinima=k;
//		while(k<idAppartamentiChiave.size()) {
//			List<String> idAppartamentiChiavePermutato= calcolaPermutazione(idAppartamentiChiave,k);
//			for(int i=1;i<idAppartamentiChiave.size();i++) { //calcola la distanza tra tutti gli appartamenti del cap di riferimento
//				Optional<Appartamento> aPrec=appartamentoRepository.findById(idAppartamentiChiavePermutato.get(i-1));
//				 Optional<Appartamento> a=appartamentoRepository.findById(idAppartamentiChiavePermutato.get(i));
//				 String url="https://maps.googleapis.com/maps/api/directions/json?departure_time=now&destination="+a.get().getIndirizzo()+"&origin="+aPrec.get().getIndirizzo()+"&key=AIzaSyBj74-Av4z5Exmne3hzvV1eWTOSBuw03AE";
//				 duration=duration + getDuration(url);
//			}
//			for(String cap: capVicino) {
//				int durationFinale=duration;
//				boolean first=true;
//				int permutazione=0;
//				List<String> idAppartamenti=listaCap.get(cap);
//				while(permutazione<idAppartamenti.size()) {
//					 List<String> idAppartamentiPermutata= calcolaPermutazione(idAppartamenti, permutazione);
//					 Optional<Appartamento> a=appartamentoRepository.findById(idAppartamenti.get(0));
//					 Optional<Appartamento> aPrec=appartamentoRepository.findById(idAppartamentiChiave.get(idAppartamentiChiave.size()-1)); //calcola la distanza dall'ultimo del cap di riferimento con il primo vicino
//					 String url="https://maps.googleapis.com/maps/api/directions/json?departure_time=now&destination="+a.get().getIndirizzo()+"&origin="+aPrec.get().getIndirizzo()+"&key=AIzaSyBj74-Av4z5Exmne3hzvV1eWTOSBuw03AE";
//					 durationFinale=durationFinale + getDuration(url);
//					 for(int i=1;i<idAppartamenti.size();i++) { //TODO : deve fare da primo a secondo a terzo, e non da primo a secondo e da primo a terzo ecc
//						a=appartamentoRepository.findById(idAppartamenti.get(i));
//						aPrec=appartamentoRepository.findById(idAppartamenti.get(i-1));
//						 url="https://maps.googleapis.com/maps/api/directions/json?departure_time=now&destination="+a.get().getIndirizzo()+"&origin="+aPrec.get().getIndirizzo()+"&key=AIzaSyBj74-Av4z5Exmne3hzvV1eWTOSBuw03AE";
//						 durationFinale=durationFinale + getDuration(url);
//					
//						 }
//					 if(first || durationFinale<minimo) {
//						 minimo=durationFinale;
//						 capMinimo=cap;
//						 permutazioneMinima=permutazione;
//						 kMinima=k;
//					 }
//					 first=false;
//					 permutazione++;
//				}
//			}
//			k++;
//			
//			gruppo.put(entry.getKey(),listaCap.get(capMinimo));
//			capVicino.remove(entry.getKey());
//			capVicino.remove(capMinimo);
//		}
//		return null;
//		
//		
//	}

	private List<String> calcolaPermutazione(List<String> id,int k){
		List<String> listaPermutata=new ArrayList<>();
		for(int i=k;i<id.size();i++) {
			listaPermutata.add(id.get(i));
			
		}
		int i=0;
		while(listaPermutata.size()<id.size()) {
			listaPermutata.add(id.get(i));
			i++;
		}
		return listaPermutata;
	}
	
	
	private int getDuration(String url) throws IOException, ParseException {
		//  String url="https://maps.googleapis.com/maps/api/directions/json?departure_time=now&destination=via%20Cagliari,3%20Ciampino&origin=via%20palermo%20Ciampino&key=AIzaSyBj74-Av4z5Exmne3hzvV1eWTOSBuw03AE";
		  StringBuilder response = new StringBuilder();;
	    try{
	    	URL obj = new URL(url);
	        // Apre una connessione HTTP
	        HttpURLConnection con = (HttpURLConnection) obj.openConnection();
	  

	        // Imposta il metodo di richiesta come GET
	        con.setRequestMethod("GET");
	
	        // Legge la risposta
	        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
	        String inputLine;
	      
	
	        while ((inputLine = in.readLine()) != null) {
	            response.append(inputLine);
	        }
	        in.close();
	
	        // Stampa la risposta JSON
	
		   // System.out.println(response.toString());
		   
		    
	 } catch (Exception e) {
         e.printStackTrace();
     }
	    //recuperato il JSON, dal file recupero la distanza

     
        JSONObject jsonObject =  new JSONObject(response.toString());

		String string1 =  jsonObject.getJSONArray("routes").get(0).toString();//.getBigInteger("value").intValue();
		
		JSONObject jsonObject2=new JSONObject(string1);
		String string2 =  jsonObject2.getJSONArray("legs").get(0).toString();//.getBigInteger("value").intValue();

		JSONObject jsonObject3=new JSONObject(string2);
		int duration =  jsonObject3.getJSONObject("duration_in_traffic").getBigInteger("value").intValue();
		System.out.println(duration);
		
		return duration;
   

	}
	
	
	
	private Map<String,List<String>> raggruppaCap() { // RAGGRUPPA CAP (CIOE PER OGNI CAP ASSOCIA GLI APPARTAMENTI DI QUEL CAP
		List<InterventoPulizia> interventiOggi = interventoPuliziaRepository.findAllInterventiOggi();
		Map<String, List<String>> listaCap=new HashMap<>();
		for(InterventoPulizia intervento: interventiOggi) {
			Optional<Appartamento> a=appartamentoRepository.findById(intervento.getIdAppartamento());
			if(!listaCap.containsKey(a.get().getCap())) {
				List<String> idApp= new ArrayList<>();
				idApp.add(a.get().getId());
				listaCap.put(a.get().getCap(), idApp);
			}
			else {
				List<String> idApp= listaCap.get(a.get().getCap());
				idApp.add(a.get().getId());
				listaCap.replace(a.get().getCap(), idApp);
			}	
		}
	 return listaCap;
	}
	
	 @PostMapping(path="/creaGruppi")
	private @ResponseBody Map<String,List<String>> creaGruppi() throws IOException, ParseException {
		 Map<String,List<String>> capVicini= new HashMap<>();
		Map<String,List<String>> listaCap = raggruppaCap();
		//TODO tra i cap che ho, devo vedere i cap che sono adiacenti e ordinarli da quelli che ne hanno di meno a di piu
		for (Map.Entry<String,List<String>> entry: listaCap.entrySet()) // FA I GRUPPI PER I CAP CHE HANNO 4 O PIU APPARTAMENTI ASSOCIATI
		{
		    String key = entry.getKey();
		    List<String> value = entry.getValue();
		 
		    if(value.size()==4) {
		    	gruppo.put(key, value);
		    	listaCap.remove(key);
		    }
		    else if(value.size()>4) {
		    	int i=0;
		    	List<String> cap=new ArrayList<>();
		    	while(i<value.size()) {
		    		if(i%4==0 && i!=0) {
		    			List<String> cap1= new ArrayList<>();
		    			cap1.add(cap.get(0));
		    			cap1.add(cap.get(1));
		    			cap1.add(cap.get(2));
		    			cap1.add(cap.get(3));
		    			gruppo.put(key, cap1);
		    			String capValue=value.get(i);
		    			value.remove(cap.get(0));
		    			value.remove(cap.get(1));
		    			value.remove(cap.get(2));
		    			value.remove(cap.get(3));
		    			cap.clear();
		    			cap.add(capValue);
		    			i++;
		    		}
		    		else {
		    			cap.add(value.get(i));
		    			i++;
		    		}
		    	}
		    	//return gruppo;
		    }
		}
		
		// UNA VOLTA FINITO DI VEDERE QUELLI MAGGIORI DI QUATTRO, CON QUELLI RIMANENTI CREA I GRUPPI
		  if(!listaCap.isEmpty()) {
		 
		  capVicini=trovaCapViciniOrdinato(listaCap);
		  while(capVicini.size()>0) {
			capVicini=trovaCapViciniOrdinato(listaCap);
			for (Map.Entry<String,List<String>> entry: capVicini.entrySet()) { //creo i gruppi con quelli < 4
				List<String> daRaggruppare=new ArrayList<>();
				
				if(entry.getValue().size()==1) {
					if(listaCap.get(entry.getKey()).size() + listaCap.get(entry.getValue().get(0)).size() == 4){
						
						daRaggruppare.addAll(listaCap.get(entry.getValue().get(0)));
						daRaggruppare.addAll(listaCap.get(entry.getKey()));
						gruppo.put(entry.getValue().get(0), daRaggruppare);
						capVicini.remove(entry.getKey());
						capVicini.remove(entry.getValue().get(0));
						listaCap.remove(entry.getKey());
						listaCap.remove(entry.getValue().get(0));
						return gruppo;
					} else if(listaCap.get(entry.getKey()).size() + listaCap.get(entry.getValue().get(0)).size() < 4) {
						capVicini.get(entry.getValue().get(0)).addAll(listaCap.get(entry.getKey()));
						capVicini.remove(entry.getKey());
					} 
					
					if(entry.getValue().size()<4) {
						while(entry.getValue().size()<4 && !capVicini.get(entry.getValue().get(0)).isEmpty()) {
							
							entry.getValue().add(capVicini.get(entry.getValue().get(0)).get(0));
							capVicini.get(entry.getValue().get(0)).remove(0);
							
						}
						gruppo.put(entry.getKey(), entry.getValue());
						capVicini.remove(entry.getKey());
					}
				} else if(entry.getValue().size()>1) {
					int size= listaCap.get(entry.getKey()).size();
					int count=0;
					List<String> capUguali4=new ArrayList<>();
					List<String> capDiversi4=new ArrayList<>();
					for(int i=0;i<entry.getValue().size();i++) {
						if(listaCap.get(entry.getValue().get(i)).size() + size == 4){ //vedo se ci sono dei cap che sommato al nostro puo formare un gruppo
							count++;
							capUguali4.add(entry.getValue().get(i)); 
						} else {
							capDiversi4.add(entry.getValue().get(i));
						}
					}
					if(count==1) {
						entry.getValue().addAll(capVicini.get(capUguali4.get(0)));
						daRaggruppare=entry.getValue();
						gruppo.put(entry.getKey(), daRaggruppare);
					} else if(count >1) {
						calcolaDistanzaDiversi(entry,capUguali4,listaCap,count , capVicini);
						capVicini=trovaCapViciniOrdinato(listaCap);
					} else {
						calcolaDistanzaDiversi(entry,capDiversi4,listaCap,count, capVicini);
						capVicini=trovaCapViciniOrdinato(listaCap);
					}
				}
				break;
			}
		  }
		  }

			for (Map.Entry<String,List<String>> entry: gruppo.entrySet()) { 
				System.out.println(entry.getKey());
				for(String id: entry.getValue()) {
					System.out.println("id:" + id);
				}
			}
			capVicini=trovaCapViciniOrdinato(listaCap);
			if(!capVicini.isEmpty()) {
				for(Map.Entry<String,List<String>> entry: capVicini.entrySet()) {
					if(entry.getValue().isEmpty()) {
						if(listaCap.get(entry.getKey()).size() == 3){
							gruppo.put(entry.getKey(),listaCap.get(entry.getKey()));
							capVicini.remove(entry.getKey());
							listaCap.remove(entry.getKey());
						} else { //quindi < 3
							for(String capVicino : caps.get(entry.getKey())) {
								for(String capVicinodelVicino: capVicini.get(capVicino)) {
									if(capVicini.containsKey(capVicinodelVicino)) {
										if(listaCap.get(capVicinodelVicino).size()<3) {
											List<String> daRaggruppare= listaCap.get(entry.getKey());
											daRaggruppare.addAll(listaCap.get(capVicinodelVicino));
											gruppo.put(capVicino, daRaggruppare);
											capVicini.remove(entry.getKey());
											listaCap.remove(entry.getKey());
											capVicini.remove(entry.getKey());
											listaCap.remove(entry.getKey());
										}
									}
								}
							}
							
						}
						
					}
				}
			}
			capVicini=trovaCapViciniOrdinato(listaCap);
			if(!capVicini.isEmpty()) {
				for(Map.Entry<String,List<String>> entry: capVicini.entrySet()) {
					gruppo.put(entry.getKey(),entry.getValue());
				}
			}
			return calcolaDistanzaFinale(gruppo);
	}
	
	@PostMapping(path="/calcoloDistanze") // Map ONLY POST Requests
	private void calcolaDistanzaDiversi(Entry<String, List<String>> entry, List<String> capVicino,
			Map<String, List<String>> listaCap,int count, Map<String, List<String>> capVicini ) throws IOException, ParseException {
		
		Optional<Appartamento> appartamento=appartamentoRepository.findById(entry.getKey());
		int minimo=0;
		String capMinimo="";
		List<String> idAppartamentiChiave=listaCap.get(entry.getKey());
		int duration=0;
		int k=0;
		int permutazioneMinima=0;
		int kMinima=k;
		int sommaApp=idAppartamentiChiave.size();
		sommaApp=listaCap.get(entry.getKey()).size();
		if(count<1) {
			for(int i=1;i<capVicino.size()+1;i++) {
				sommaApp= sommaApp + listaCap.get(capVicino.get(i-1)).size();
				if(sommaApp >4)
					break;
				listaCap.get(entry.getKey()).addAll(listaCap.get(capVicino.get(i-1)));
				caps.get(entry.getKey()).addAll(capVicini.get(capVicino.get(i-1)));
				caps.get(entry.getKey()).remove(entry.getKey());
				listaCap.remove(capVicino.get(i-1));
				
				capVicino.remove(i-1);
				capVicini=trovaCapViciniOrdinato(listaCap);
				i--;
			}
		}
		capVicini=trovaCapViciniOrdinato(listaCap);
		if(sommaApp == 4) {
			gruppo.put(entry.getKey(), idAppartamentiChiave);
		//	listaCap.remove(capVicino.get(i-1));
			
		}
		boolean first=true;
		while(k<idAppartamentiChiave.size() && sommaApp<4) {
			
			List<String> idAppartamentiChiavePermutato= calcolaPermutazione(idAppartamentiChiave,k);
			for(int i=1;i<idAppartamentiChiave.size();i++) { //calcola la distanza tra tutti gli appartamenti del cap di riferimento
				Optional<Appartamento> aPrec=appartamentoRepository.findById(idAppartamentiChiavePermutato.get(i-1));
				 Optional<Appartamento> a=appartamentoRepository.findById(idAppartamentiChiavePermutato.get(i));
				 String url="https://maps.googleapis.com/maps/api/directions/json?departure_time=now&destination="+a.get().getIndirizzo()+a.get().getCitta()+"&origin="+aPrec.get().getIndirizzo()+aPrec.get().getCitta()+"&key=AIzaSyBj74-Av4z5Exmne3hzvV1eWTOSBuw03AE";
				 duration=duration + getDuration(url);
			}
			for(String cap: capVicino) {
				int durationFinale=duration;
				
				int permutazione=0;
				int sizeGruppo= 4 - idAppartamentiChiave.size();
				List<String> idAppartamenti=listaCap.get(cap);
				while(permutazione<idAppartamenti.size()) {
					 List<String> idAppartamentiPermutata= calcolaPermutazione(idAppartamenti, permutazione,sizeGruppo);
					 Optional<Appartamento> a=appartamentoRepository.findById(idAppartamentiPermutata.get(0));
					 Optional<Appartamento> aPrec=appartamentoRepository.findById(idAppartamentiChiavePermutato.get(idAppartamentiChiave.size()-1)); //calcola la distanza dall'ultimo del cap di riferimento con il primo vicino
					 String url="https://maps.googleapis.com/maps/api/directions/json?departure_time=now&destination="+a.get().getIndirizzo()+a.get().getCitta()+"&origin="+aPrec.get().getIndirizzo()+aPrec.get().getCitta()+"&key=AIzaSyBj74-Av4z5Exmne3hzvV1eWTOSBuw03AE";
					 durationFinale=durationFinale + getDuration(url);
					 for(int i=1;i<idAppartamentiPermutata.size();i++) { //TODO : deve fare da primo a secondo a terzo, e non da primo a secondo e da primo a terzo ecc
						a=appartamentoRepository.findById(idAppartamentiPermutata.get(i));
						aPrec=appartamentoRepository.findById(idAppartamentiPermutata.get(i-1));
						 url="https://maps.googleapis.com/maps/api/directions/json?departure_time=now&destination="+a.get().getIndirizzo()+a.get().getCitta()+"&origin="+aPrec.get().getIndirizzo()+aPrec.get().getCitta()+"&key=AIzaSyBj74-Av4z5Exmne3hzvV1eWTOSBuw03AE";
						 durationFinale=durationFinale + getDuration(url);
					
						 }
					 if(first || durationFinale<minimo) {
						 minimo=durationFinale;
						 capMinimo=cap;
						 permutazioneMinima=permutazione;
						 kMinima=k;
					 }
					 first=false;
					 permutazione++;
				}
			}
			k++;
			
			
		}
		gruppo.put(entry.getKey(),listaCap.get(capMinimo));
		listaCap.remove(entry.getKey());
		listaCap.remove(capMinimo);
		capVicino.remove(entry.getKey());
		capVicino.remove(capMinimo);
	}

	private List<String> calcolaPermutazione(List<String> id, int k, int sizeGruppo) {
		List<String> listaPermutata=new ArrayList<>();
		for(int i=k;i<id.size() && listaPermutata.size()<sizeGruppo;i++) {
			
			listaPermutata.add(id.get(i));
			
		}
		int i=0;
	
		while(listaPermutata.size()<sizeGruppo && i<id.size()) {
			listaPermutata.add(id.get(i));
			i++;
		}
		return listaPermutata;
	}

	private Map<String,List<String>> trovaCapViciniOrdinato(Map<String,List<String>> listaCap) {
		  Map<String,List<String>> capVicini= new HashMap<>();
		  System.out.println(caps);
		for (Map.Entry<String,List<String>> entry: listaCap.entrySet()) //FA I GRUPPI CON I RIMANENTI CAP CON <4 APPARTAMENTI
		{
			Iterator<Map.Entry<String, List<String>>> itr = caps.entrySet().iterator();
			
			while (itr.hasNext()) {
				Map.Entry<String, List<String>> cap1= itr.next();
				System.out.println(entry.getKey());
			        System.out.println(cap1.getKey());
			        System.out.println(cap1.getValue());
					if(cap1.getValue().contains(entry.getKey())) {
						if(listaCap.containsKey(cap1.getKey())) {
							if(!capVicini.containsKey(entry.getKey())) {
								List<String> a=new ArrayList<>();
								a.add(cap1.getKey());
								capVicini.put(entry.getKey(),a);
							} else {
								capVicini.get(entry.getKey()).add(cap1.getKey());
								}
						}
						
					}
				}
			}
		Map<String, List<String>> sorted = capVicini.entrySet().stream()  //ORDINO DA CHI HA MENO CAP A CHI DI PIU
			    .sorted(comparingInt(e -> e.getValue().size()))
			    .collect(toMap(
			        Map.Entry::getKey,
			        Map.Entry::getValue,
			        (a, b) -> { throw new AssertionError(); },
			        LinkedHashMap::new
			    )); 
			return sorted;
		}
	
	
}